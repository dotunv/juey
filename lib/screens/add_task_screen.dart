import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/task.dart';
import '../providers/task_provider.dart';
import '../providers/tag_provider.dart';
import '../features/auth/widgets/auth_form_field.dart';
import '../features/auth/widgets/auth_button.dart';

class AddTaskScreen extends ConsumerStatefulWidget {
  const AddTaskScreen({super.key});

  @override
  ConsumerState<AddTaskScreen> createState() => _AddTaskScreenState();
}

class _AddTaskScreenState extends ConsumerState<AddTaskScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  List<String> _selectedTagIds = [];
  bool _loading = false;

  Future<void> _addTask() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _loading = true);

    try {
      final userId = Supabase.instance.client.auth.currentUser!.id;
      final newTask = Task(
        id: '', // Will be generated by Supabase
        title: _titleController.text.trim(),
        description: _descriptionController.text.trim().isEmpty ? null : _descriptionController.text.trim(),
        tagIds: _selectedTagIds,
        createdAt: DateTime.now(),
        isCompleted: false,
        userId: userId,
      );
      await ref.read(taskListProvider.notifier).addTask(newTask);
      if (mounted) {
        context.go('/');
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error adding task: $e')),
        );
      }
    } finally {
      setState(() => _loading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final tagAsync = ref.watch(tagListProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Task'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.go('/'),
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.purple.shade50, Colors.blue.shade50],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.all(24),
            child: Form(
              key: _formKey,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    'Create New Task',
                    style: Theme.of(context).textTheme.headlineLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: Theme.of(context).colorScheme.primary,
                        ),
                  ),
                  const SizedBox(height: 32),

                  // Title Field
                  AuthFormField(
                    controller: _titleController,
                    labelText: "Task Title",
                    validator: (value) => value == null || value.isEmpty ? "Enter a title" : null,
                  ),
                  const SizedBox(height: 16),

                  // Description Field
                  AuthFormField(
                    controller: _descriptionController,
                    labelText: "Description (optional)",
                  ),
                  const SizedBox(height: 24),

                  // Tags Selection
                  if (tagAsync.hasValue && tagAsync.value!.isNotEmpty) ...[
                    const Text('Select Tags:', style: TextStyle(fontWeight: FontWeight.w500)),
                    const SizedBox(height: 8),
                    StatefulBuilder(
                      builder: (context, setState) => Wrap(
                        spacing: 8,
                        children: tagAsync.value!.map((tag) => FilterChip(
                          label: Text(tag.name),
                          selected: _selectedTagIds.contains(tag.id),
                          onSelected: (selected) {
                            setState(() {
                              if (selected) {
                                _selectedTagIds.add(tag.id);
                              } else {
                                _selectedTagIds.remove(tag.id);
                              }
                            });
                          },
                        )).toList(),
                      ),
                    ),
                    const SizedBox(height: 24),
                  ],

                  // Add Task Button
                  AuthButton(
                    label: "Add Task ðŸš€",
                    onPressed: _addTask,
                    loading: _loading,
                  ),
                  const SizedBox(height: 16),

                  // Cancel Button
                  TextButton(
                    onPressed: () => context.go('/'),
                    child: const Text('Cancel'),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }
}
